    {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "Template to create ec2 instances",
        "Parameters": {
            "KeyName": {
                "Type": "AWS::EC2::KeyPair::KeyName",
                "Default": "kj-ec2-labs",
                "Description": "Name of an existing EC2 KeyPair. Instances will launch with this KeyPair."
            },
            "VPC": {
                "Type": "AWS::EC2::VPC::Id",
                "Description": "VPC-ID of your existing Virtual Private Cloud (VPC) where you want to depoy.",
                "AllowedPattern": "vpc-[0-9a-z]{8}"
            },
            "Subnets": {
                "Type": "List<AWS::EC2::Subnet::Id>",
                "Default": "subnet-a085218f,subnet-936707d8,subnet-82f72edf,subnet-8b0e8db4,subnet-aa3952ce,subnet-e6f0e7ea",
                "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy."
            },
            "AMI": {
                "Description": "AMI ID uses the amazon linux 2 Image by Default",
                "Type": "String",
                "Default": "ami-2452275e"
            },
            "SSHLocation": {
                "Description": "The IP address range that can be used to SSH to the EC2 instances",
                "Type": "String",
                "MinLength": "9",
                "MaxLength": "18",
                "Default": "0.0.0.0/0",
                "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
                "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
            },
            "InstanceType": {
                "Type": "String",
                "Default": "t2.micro",
                "AllowedValues": [
                    "t2.micro"
                ],
                "Description": "EC2 instance type (e.g. t2.micro)"
            },
            "SecurityGroupId": {
                "Type": "AWS::EC2::SecurityGroup::Id",
                "Description": "Security group ID"
            }
        },
        "Resources": {
            "Listener": {
                "Type": "AWS::ElasticLoadBalancingV2::Listener",
                "Properties": {
                    "DefaultActions": [
                        {
                            "Type": "forward",
                            "TargetGroupArn": {
                                "Ref": "TargetGroup"
                            }
                        }
                    ],
                    "LoadBalancerArn": {
                        "Ref": "LoadBalancer"
                    },
                    "Port": "80",
                    "Protocol": "HTTP"
                }
            },
            "LoadBalancer": {
                "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
                "Properties": {
                    "Name": "SimpleLoadBalancer",
                    "Scheme": "internet-facing",
                    "Subnets": {
                        "Ref": "Subnets"
                    },
                    "LoadBalancerAttributes": [
                        {
                            "Key": "idle_timeout.timeout_seconds",
                            "Value": "50"
                        }
                    ],
                    "SecurityGroups": [
                        {
                            "Ref": "SecurityGroupId"
                        }
                    ],
                    "Tags": [
                        {
                            "Key": "Name",
                            "Value": "MyLB"
                        }
                    ],
                    "Type": "application",
                    "IpAddressType": "ipv4"
                }
            },
            "TargetGroup": {
                "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                "Properties": {
                    "HealthCheckIntervalSeconds": 30,
                    "HealthyThresholdCount": 3,
                    "UnhealthyThresholdCount": 10,
                    "HealthCheckPath": "/health.html",
                    "Name": "TargetGroup",
                    "Port": 80,
                    "Protocol": "HTTP",
                    "VpcId": {
                        "Ref": "VPC"
                    }
                }
            },
            "ASGRole": {
                "Type": "AWS::IAM::Role",
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Sid": "AllowEc2ServiceToAssumeRole",
                                "Effect": "Allow",
                                "Action": [
                                    "sts:AssumeRole"
                                ],
                                "Principal": {
                                    "Service": [
                                        "ec2.amazonaws.com"
                                    ]
                                }
                            }
                        ]
                    }
                }
            },
            "S3Policy": {
                "Type": "AWS::IAM::Policy",
                "Properties": {
                    "PolicyName": "S3Policy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:ListBucket",
                                    "s3:ListBucketVersions",
                                    "s3:GetObject",
                                    "s3:GetObjectVersion",
                                    "s3:PutObject",
                                    "s3:DeleteObject"
                                ],
                                "Resource": "arn:aws:s3:::*"
                            }
                        ]
                    },
                    "Roles": [
                        {
                            "Ref": "ASGRole"
                        }
                    ]
                }
            },
            "InstanceProfile": {
                "Type": "AWS::IAM::InstanceProfile",
                "Properties": {
                    "Path": "/",
                    "Roles": [
                        {
                            "Ref": "ASGRole"
                        }
                    ]
                }
            },
            "ASGSecurityGroup": {
                "Type": "AWS::EC2::SecurityGroup",
                "Properties": {
                    "GroupDescription": "Enable SSH access and HTTP from the load balancer only",
                    "SecurityGroupIngress": [
                        {
                            "IpProtocol": "tcp",
                            "FromPort": "22",
                            "ToPort": "22",
                            "CidrIp": {
                                "Ref": "SSHLocation"
                            }
                        },
                        {
                            "IpProtocol": "tcp",
                            "FromPort": "80",
                            "ToPort": "80",
                            "CidrIp": {
                                "Ref": "SSHLocation"
                            }
                        }
                    ]
                }
            },
            "LaunchConfig": {
                "Type": "AWS::AutoScaling::LaunchConfiguration",
                "Metadata": {
                    "Comment": "Install a simple application",
                    "AWS::CloudFormation::Init": {
                        "config": {
                            "packages": {
                                "yum": {
                                    "httpd": []
                                }
                            },
                            "files": {
                                "/var/www/html/index.html": {
                                    "content": {
                                        "Fn::Join": [
                                            "\n",
                                            [
                                                "<h1>Hello World.</h1>"
                                            ]
                                        ]
                                    },
                                    "mode": "000644",
                                    "owner": "root",
                                    "group": "root"
                                },
                                "/var/www/html/health.html": {
                                    "content": {
                                        "Fn::Join": [
                                            "\n",
                                            [
                                                "<h1>Alive.</h1>"
                                            ]
                                        ]
                                    },
                                    "mode": "000644",
                                    "owner": "root",
                                    "group": "root"
                                },
                                "/etc/cfn/cfn-hup.conf": {
                                    "content": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "[main]\n",
                                                "stack=",
                                                {
                                                    "Ref": "AWS::StackId"
                                                },
                                                "\n",
                                                "region=",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "\n"
                                            ]
                                        ]
                                    },
                                    "mode": "000400",
                                    "owner": "root",
                                    "group": "root"
                                },
                                "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                    "content": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "[cfn-auto-reloader-hook]\n",
                                                "triggers=post.update\n",
                                                "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                                "action=/opt/aws/bin/cfn-init -v ",
                                                "         --stack ",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                "         --resource LaunchConfig ",
                                                "         --region ",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "\n",
                                                "runas=root\n"
                                            ]
                                        ]
                                    }
                                }
                            },
                            "services": {
                                "sysvinit": {
                                    "httpd": {
                                        "enabled": "true",
                                        "ensureRunning": "true"
                                    },
                                    "cfn-hup": {
                                        "enabled": "true",
                                        "ensureRunning": "true",
                                        "files": [
                                            "/etc/cfn/cfn-hup.conf",
                                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "Properties": {
                    "InstanceType": {
                        "Ref": "InstanceType"
                    },
                    "ImageId": {
                        "Ref": "AMI"
                    },
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "SecurityGroups": [
                        {
                            "Ref": "ASGSecurityGroup"
                        }
                    ],
                    "IamInstanceProfile": {
                        "Ref": "InstanceProfile"
                    },
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash -xe\n",
                                    "yum update -y aws-cfn-bootstrap\n",
                                    "/opt/aws/bin/cfn-init -v ",
                                    "         --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "         --resource LaunchConfig ",
                                    "         --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n"
                                ]
                            ]
                        }
                    }
                }
            },
            "ServerGroup": {
                "Type": "AWS::AutoScaling::AutoScalingGroup",
                "Properties": {
                    "AvailabilityZones": {
                        "Fn::GetAZs": {
                            "Ref": "AWS::Region"
                        }
                    },
                    "LaunchConfigurationName": {
                        "Ref": "LaunchConfig"
                    },
                    "Cooldown": 360,
                    "MinSize": "2",
                    "MaxSize": "4",
                    "TargetGroupARNs": [
                        {
                            "Ref": "TargetGroup"
                        }
                    ]
                },
                "CreationPolicy": {
                    "ResourceSignal": {
                        "Timeout": "PT15M",
                        "Count": "1"
                    }
                },
                "UpdatePolicy": {
                    "AutoScalingRollingUpdate": {
                        "MinInstancesInService": "1",
                        "MaxBatchSize": "1",
                        "PauseTime": "PT15M",
                        "WaitOnResourceSignals": "true"
                    }
                }
            },
            "ScaleUpPolicy": {
                "Type": "AWS::AutoScaling::ScalingPolicy",
                "Properties": {
                    "AdjustmentType": "ChangeInCapacity",
                    "AutoScalingGroupName": {
                        "Ref": "ServerGroup"
                    },
                    "Cooldown": "1",
                    "ScalingAdjustment": "1"
                }
            },
            "ScaleDownPolicy": {
                "Type": "AWS::AutoScaling::ScalingPolicy",
                "Properties": {
                    "AdjustmentType": "ChangeInCapacity",
                    "AutoScalingGroupName": {
                        "Ref": "ServerGroup"
                    },
                    "Cooldown": "1",
                    "ScalingAdjustment": "-1"
                }
            },
            "CPUAlarmHigh": {
                "Type": "AWS::CloudWatch::Alarm",
                "Properties": {
                    "EvaluationPeriods": "1",
                    "Statistic": "Average",
                    "Threshold": "90",
                    "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
                    "Period": "300",
                    "AlarmActions": [
                        {
                            "Ref": "ScaleUpPolicy"
                        }
                    ],
                    "Namespace": "AWS/EC2",
                    "Dimensions": [
                        {
                            "Name": "AutoScalingGroupName",
                            "Value": {
                                "Ref": "ServerGroup"
                            }
                        }
                    ],
                    "ComparisonOperator": "GreaterThanThreshold",
                    "MetricName": "CPUUtilization"
                }
            },
            "CPUAlarmLow": {
                "Type": "AWS::CloudWatch::Alarm",
                "Properties": {
                    "EvaluationPeriods": "1",
                    "Statistic": "Average",
                    "Threshold": "10",
                    "AlarmDescription": "Alarm if CPU too Low indicating not enough usage scale down for cost",
                    "Period": "300",
                    "AlarmActions": [
                        {
                            "Ref": "ScaleDownPolicy"
                        }
                    ],
                    "Namespace": "AWS/EC2",
                    "Dimensions": [
                        {
                            "Name": "AutoScalingGroupName",
                            "Value": {
                                "Ref": "ServerGroup"
                            }
                        }
                    ],
                    "ComparisonOperator": "LessThanThreshold",
                    "MetricName": "CPUUtilization"
                }
            }
        }
    }